#include <stdio.h>
#include <stdlib.h>

int compareEdges(const int edge1[], const int edge2[]) {        // Comparator function to sort edges by their weights
    return edge1[2] - edge2[2];
}

void initializeSets(int parent[], int rank[], int size) {
    for (int i = 0; i < size; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
}

int findRoot(int parent[], int node) {          // Find the representative (root) of the set that node belongs to
    if (parent[node] == node)
        return node;

    return parent[node] = findRoot(parent, parent[node]);
}

void unionSets(int node1, int node2, int parent[], int rank[]) {
    int root1 = findRoot(parent, node1);
    int root2 = findRoot(parent, node2);

    if (root1 != root2) {
        if (rank[root1] < rank[root2]) {
            parent[root1] = root2;
        } else if (rank[root1] > rank[root2]) {
            parent[root2] = root1;
        } else {
            parent[root2] = root1;
            rank[root1]++;
        }
    }
}

int kruskalMST(int numEdges, int edges[][3]) {
    // Sort edges by weight in ascending order
    qsort(edges, numEdges, sizeof(edges[0]), (int (*)(const void*, const void*))compareEdges);

    int parent[numEdges];
    int rank[numEdges];
    initializeSets(parent, rank, numEdges);

    int minCost = 0;

    for (int i = 0; i < numEdges; i++) {
        int uRoot = findRoot(parent, edges[i][0]);
        int vRoot = findRoot(parent, edges[i][1]);
        int weight = edges[i][2];

        // Include edge if it connects two different components
        if (uRoot != vRoot) {
            unionSets(uRoot, vRoot, parent, rank);
            minCost += weight;
        }
    }

    return minCost;
}

int main() {
    // Each edge: {source, destination, weight}
    int edges[5][3] = {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };

    int numEdges = sizeof(edges) / sizeof(edges[0]);

    int mstCost = kruskalMST(numEdges, edges);
    printf("Total cost of Minimum Spanning Tree : %d\n", mstCost);

    return 0;
}
// Output
// Total cost of Minimum Spanning Tree : 19
