#include <stdio.h>
#include <stdlib.h>

#define N 5  // You can change N to any board size

int board[N][N];

// Function to check if a queen can be placed at board[row][col]
int isSafe(int row, int col) {
    int i, j;

    // Check this column on upper side
    for (i = 0; i < row; i++) {
        if (board[i][col]) return 0;
    }

    // Check upper-left diagonal
    for (i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) return 0;
    }

    // Check upper-right diagonal
    for (i = row - 1, j = col + 1; i >= 0 && j < N; i--, j++) {
        if (board[i][j]) return 0;
    }

    return 1;
}

// Recursive function to solve N-Queens
int solveNQueens(int row) {
    if (row == N) return 1;  // All queens are placed

    for (int col = 0; col < N; col++) {
        if (isSafe(row, col)) {
            board[row][col] = 1;

            if (solveNQueens(row + 1)) {
                return 1;
            }

            // Backtrack
            board[row][col] = 0;
        }
    }

    return 0;
}

// Function to print the result
void printSolution() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (board[i][j]) {
                printf("%d ", j + 1);  // 1-based column index
            }
        }
    }
    printf("\n");
}

int main() {
    // Initialize board with 0s
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            board[i][j] = 0;

    if (solveNQueens(0)) {
        printSolution();
    } else {
        printf("-1\n");
    }

    return 0;
}


// Output
// 1 3 5 2 4 
